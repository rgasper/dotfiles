# Start configuration added by Zim install {{{
#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
## zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
## zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
## zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
## zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# # Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key
# }}} End configuration added by Zim install



# ------------------
# User Configuration
# ------------------

# openssl installed by brew. xcode-select not including them anymore? who knows.
export LDFLAGS="-L$(brew --prefix openssl)/lib" 
export CPPFLAGS="-I$(brew --prefix openssl)/include"
export TIMEFMT=$'\nreal\t%E\nuser\t%U \nsystem\t%S\nCPU\t%P\nMaxMem\t%M \nAvgMem\t%K'

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
 if [[ -n $SSH_CONNECTION ]]; then
   # not-null ssh connection - remote
   export EDITOR='vi'
 else
   # null ssh connection - local
   export EDITOR='hx'
 fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

alias mk='minikube'
alias kc='kubectl'
alias tg="terragrunt"
alias tf="terraform"
alias safebash="curl https://raw.githubusercontent.com/rgasper/minimal_safe_bash_script/main/template.sh"
alias todo="todo.sh"
alias vi="nvim"
alias dnsFlush="sudo killall -HUP mDNSResponder"
alias ga="git add"
alias gps="git push"
alias gpsu='git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD | tr -d "[:space:]")'
alias gpl="git pull"
alias gcm="git commit -m"
alias wip="git commit --no-verify -m"
alias wipa="git commit -a --no-verify -m"
alias grs="git restore"
alias grss="git restore --staged"
alias gco="git checkout"
alias gs="git status"
alias gd="git diff"
alias grom"git reset origin/main || git reset origin/master"
alias gds="git diff --staged"
alias dcd="docker compose down"
alias dcu="docker compose up"
alias dcud="docker compose up -d"
alias dce="docker compose exec"
alias dcb="docker compose build"
alias dcr="docker compose run"
alias dclf="docker compose logs -f"
alias dps="docker ps"
alias lzd='lazydocker'
alias gg='lazygit'
alias la='ls -ltha'
alias icat="kitty +kitten icat"
alias hg="kitty +kitten hyperlinked_grep"
alias poetry-reinstall='poetry lock --no-cache --regenerate && poetry sync --with dev --no-cache'


# aws autocomplete
# autoload bashcompinit && bashcompinit
# complete -C 'aws_completer' aws

# dvc autocomplete
# autoload -Uz compinit
# compinit

# color hints for tab completion
# Case insensitive match
# zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Group matches and describe.
# zstyle ':completion:*:*:*:*:*' menu select
# zstyle ':completion:*:matches' group 'yes'
# zstyle ':completion:*:options' description 'yes'
# zstyle ':completion:*:options' auto-description '%d'
# zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
# zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
# zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
# zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
# zstyle ':completion:*:default' list-prompt '%S%M matches%s'
# zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
# zstyle ':completion:*' group-name ''
# zstyle ':completion:*' verbose yes

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"


# homebrew dont install the universe
export HOMEBREW_NO_INSTALL_CLEANUP=true
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_NO_ANALYTICS=1


export PATH="/Users/raymondgasper/.local/bin:$PATH"
# libpq homebrew doesnt put in path by default...
export PATH="/opt/homebrew/opt/libpq/bin:$PATH"

# java brew path, it doesn't do it automatically
PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

# use helix as default editor
export EDITOR=hx

#######################
# My Little Functions #
#######################
# gitignore curler
function gi() { curl -sLw n https://www.toptal.com/developers/gitignore/api/$@ ;}
# peek what's going on in a directory
function peek() { ls -ltha "${1-.}" | head -n "${2-10}"; }
# https://github.com/antonmedv/walk
function lk {
  cd "$(walk "$@")"
}
function branchages() {
   git for-each-ref --sort=authordate --format '%(authordate:iso) %(align:left,25)%(refname:short)%(end) %(subject)' refs/heads
}
# from imakira on hackernews
function frg {
  result=`rg --ignore-case --color=always --line-number --no-heading "$@" |
    fzf --ansi \
        --color 'hl:-1:underline,hl+:-1:underline:reverse' \
        --delimiter ':' \
        --preview "bat --color=always {1} --theme='Solarized (light)' --highlight-line {2}" \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'`
  file="${result%%:*}"
  linenumber=`echo "${result}" | cut -d: -f2`
  if [ ! -z "$file" ]; then
          $EDITOR +"${linenumber}" "$file"
  fi
}
zstyle ':completion:*' menu select
fpath+=~/.zfunc

# thanks sam and rory
function awsenv {
  # If no profile argument is provided, list all available profiles and show current env
  if [[ -z "$1" ]]; then
    echo "üìã Available AWS Profiles:"
    echo "------------------------"

    # Show current profile if set
    if [[ -n "$AWS_PROFILE" ]]; then
      echo "üü¢ Current Profile: $AWS_PROFILE"
      echo "------------------------"
    fi

    # List profiles from config file
    if [[ -f "$HOME/.aws/config" ]]; then
      grep "\[profile" "$HOME/.aws/config" | sed 's/\[profile \(.*\)\]/\1/' | while read -r profile; do
        if [[ "$profile" == "$AWS_PROFILE" ]]; then
          echo "  ‚úì $profile"
        else
          echo "  ‚Ä¢ $profile"
        fi
      done
    fi

    # Add default profile if it exists in credentials file
    if [[ -f "$HOME/.aws/credentials" ]] && grep -q "^\[default\]" "$HOME/.aws/credentials"; then
      if [[ "default" == "$AWS_PROFILE" ]]; then
        echo "  ‚úì default"
      else
        echo "  ‚Ä¢ default"
      fi
    fi

    # List other profiles from credentials file
    if [[ -f "$HOME/.aws/credentials" ]]; then
      grep "\[" "$HOME/.aws/credentials" | sed 's/\[\(.*\)\]/\1/' | grep -v '^default$' | while read -r profile; do
        if [[ "$profile" == "$AWS_PROFILE" ]]; then
          echo "  ‚úì $profile"
        else
          echo "  ‚Ä¢ $profile"
        fi
      done
    fi
    echo "üìù Usage: awsenv <profile-name>"
    return 0
  fi

  local profile="$1"
  local config_path="$HOME/.aws/config"
  local creds_path="$HOME/.aws/credentials"

  # Check if profile exists in either config or credentials
  if ! grep -q "\[profile $profile\]" "$config_path" && ! grep -q "\[$profile\]" "$creds_path" && [[ "$profile" != "default" ]]; then
    echo "‚ùå Profile '$profile' not found"
    echo "   Check your AWS configuration files:"
    echo "   - $config_path"
    echo "   - $creds_path"
    return 1
  fi

  # Set the AWS profile
  export AWS_PROFILE="$profile"
  echo "‚úÖ Switched to AWS profile: $AWS_PROFILE"

  # Get caller identity and handle SSO login if needed
  if ! identity=$(aws sts get-caller-identity --profile "$AWS_PROFILE" --output json 2>/dev/null); then
    echo "‚ö†Ô∏è  Authentication needed, attempting SSO login..."
    if aws sso login --profile "$AWS_PROFILE"; then
      echo "‚úÖ SSO login successful"
      identity=$(aws sts get-caller-identity --profile "$AWS_PROFILE" --output json)
    else
      echo "‚ùå SSO login failed"
      return 1
    fi
  fi

  echo "üîë Current AWS Identity:"
  echo "$identity" | jq '. | {Account, Arn}'

  # Update right prompt to show active AWS profile
  RPROMPT='$( [[ -n $AWS_PROFILE ]] && echo "%F{242}(aws:$AWS_PROFILE)%f" )'
}

# Claude Code configuration
export CLAUDE_CODE_USE_BEDROCK=1

# Ensure Homebrew bin is at the front of the PATH, removing duplicates
if command -v brew &> /dev/null; then
  BREW_BIN_PATH="$(brew --prefix)/bin"
  # Remove existing instances of the brew bin path from PATH
  # Use awk for robustness with multiple colons or leading/trailing colons
  export PATH=$(echo $PATH | awk -v RS=':' -v ORS=':' "\$0 != \"$BREW_BIN_PATH\"" | sed 's/:$//')
  # Prepend the brew bin path
  export PATH="$BREW_BIN_PATH:$PATH"
fi


# yazi suggested util to make it quit into the directory you've navigated to
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}

export DOCKER_HOST=$(docker context inspect | jq -r '.[0].Endpoints.docker.Host')

eval "$(direnv hook zsh)"


function ticket_diff() {
    local ticket_id="$1"

    # 1. Validate input argument
    if [ -z "$ticket_id" ]; then
        echo "Usage: get_ticket_commits_and_diff <TICKET_ID>"
        echo "Example: get_ticket_commits_and_diff INF-123"
        return 1
    fi

    # 2. Check if inside a Git repository
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not inside a Git repository."
        return 1
    fi

    echo "Searching for commits containing '$ticket_id'..."
    echo

    # 3. Collect commits containing the ticket ID
    # --all: Search across all branches, tags, etc.
    # --grep="$ticket_id": Filter commit messages for the ticket ID.
    # --pretty=format:"%H %ad": Format output to show commit hash and author date.
    # --date=iso: Use ISO 8601 format for the date.
    local commits_info=$(git log --all --grep="$ticket_id" --pretty=format:"%H %ad" --date=iso)

    if [ -z "$commits_info" ]; then
        echo "No commits found containing '$ticket_id'."
        return 0
    fi

    echo "--- Found Commits ---"
    echo

    # 4. Iterate through each found commit
    while IFS= read -r line; do
        local commit_hash=$(echo "$line" | awk '{print $1}')
        # Extract the timestamp (everything after the first space)
        local commit_timestamp=$(echo "$line" | cut -d' ' -f2-)

        echo "Commit Hash: $commit_hash"
        echo "Timestamp: $commit_timestamp"
        echo "--------------------------------------------------"
        echo "Git Diff Output for Commit $commit_hash:"
        # `git show` displays the commit message, author, date, and then the diff.
        # This provides full context for each commit's changes.
        git show "$commit_hash"
        echo "=================================================="
        echo
    done <<< "$commits_info"

    echo "--- End of Commit List ---"
}

eval "$(pixi completion --shell zsh)"
